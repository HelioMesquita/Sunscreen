// MARK: - Mocks generated from file: TestExample/Scenes/Home/HomeInteractor.swift at 2019-10-19 21:51:28 +0000

//
//  HomeInteractor.swift
//  TestExample
//
//  Created by Hélio Mesquita on 11/10/19.
//  Copyright (c) 2019 Hélio Mesquita. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
// This tag below is used to create the testable files from the Cuckoo pod
// CUCKOO_TESTABLE
import Cuckoo
@testable import TestExample

import UIKit


 class MockHomeBusinessLogic: HomeBusinessLogic, Cuckoo.ProtocolMock {
    
     typealias MocksType = HomeBusinessLogic
    
     typealias Stubbing = __StubbingProxy_HomeBusinessLogic
     typealias Verification = __VerificationProxy_HomeBusinessLogic

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: false)

    
    private var __defaultImplStub: HomeBusinessLogic?

     func enableDefaultImplementation(_ stub: HomeBusinessLogic) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    

    

    
    
    
     func verifyBMI(height: String?, weight: String?)  {
        
    return cuckoo_manager.call("verifyBMI(height: String?, weight: String?)",
            parameters: (height, weight),
            escapingParameters: (height, weight),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.verifyBMI(height: height, weight: weight))
        
    }
    

	 struct __StubbingProxy_HomeBusinessLogic: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    func verifyBMI<M1: Cuckoo.OptionalMatchable, M2: Cuckoo.OptionalMatchable>(height: M1, weight: M2) -> Cuckoo.ProtocolStubNoReturnFunction<(String?, String?)> where M1.OptionalMatchedType == String, M2.OptionalMatchedType == String {
	        let matchers: [Cuckoo.ParameterMatcher<(String?, String?)>] = [wrap(matchable: height) { $0.0 }, wrap(matchable: weight) { $0.1 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockHomeBusinessLogic.self, method: "verifyBMI(height: String?, weight: String?)", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_HomeBusinessLogic: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	
	    
	    @discardableResult
	    func verifyBMI<M1: Cuckoo.OptionalMatchable, M2: Cuckoo.OptionalMatchable>(height: M1, weight: M2) -> Cuckoo.__DoNotUse<(String?, String?), Void> where M1.OptionalMatchedType == String, M2.OptionalMatchedType == String {
	        let matchers: [Cuckoo.ParameterMatcher<(String?, String?)>] = [wrap(matchable: height) { $0.0 }, wrap(matchable: weight) { $0.1 }]
	        return cuckoo_manager.verify("verifyBMI(height: String?, weight: String?)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class HomeBusinessLogicStub: HomeBusinessLogic {
    

    

    
     func verifyBMI(height: String?, weight: String?)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
}



 class MockHomeDataStore: HomeDataStore, Cuckoo.ProtocolMock {
    
     typealias MocksType = HomeDataStore
    
     typealias Stubbing = __StubbingProxy_HomeDataStore
     typealias Verification = __VerificationProxy_HomeDataStore

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: false)

    
    private var __defaultImplStub: HomeDataStore?

     func enableDefaultImplementation(_ stub: HomeDataStore) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    

    

    

	 struct __StubbingProxy_HomeDataStore: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	}

	 struct __VerificationProxy_HomeDataStore: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	
	    
	}
}

 class HomeDataStoreStub: HomeDataStore {
    

    

    
}



 class MockHomeInteractor: HomeInteractor, Cuckoo.ClassMock {
    
     typealias MocksType = HomeInteractor
    
     typealias Stubbing = __StubbingProxy_HomeInteractor
     typealias Verification = __VerificationProxy_HomeInteractor

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: true)

    
    private var __defaultImplStub: HomeInteractor?

     func enableDefaultImplementation(_ stub: HomeInteractor) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    
    
    
     override var presenter: HomePresentationLogic? {
        get {
            return cuckoo_manager.getter("presenter",
                superclassCall:
                    
                    super.presenter
                    ,
                defaultCall: __defaultImplStub!.presenter)
        }
        
        set {
            cuckoo_manager.setter("presenter",
                value: newValue,
                superclassCall:
                    
                    super.presenter = newValue
                    ,
                defaultCall: __defaultImplStub!.presenter = newValue)
        }
        
    }
    

    

    
    
    
     override func verifyBMI(height: String?, weight: String?)  {
        
    return cuckoo_manager.call("verifyBMI(height: String?, weight: String?)",
            parameters: (height, weight),
            escapingParameters: (height, weight),
            superclassCall:
                
                super.verifyBMI(height: height, weight: weight)
                ,
            defaultCall: __defaultImplStub!.verifyBMI(height: height, weight: weight))
        
    }
    

	 struct __StubbingProxy_HomeInteractor: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    var presenter: Cuckoo.ClassToBeStubbedOptionalProperty<MockHomeInteractor, HomePresentationLogic> {
	        return .init(manager: cuckoo_manager, name: "presenter")
	    }
	    
	    
	    func verifyBMI<M1: Cuckoo.OptionalMatchable, M2: Cuckoo.OptionalMatchable>(height: M1, weight: M2) -> Cuckoo.ClassStubNoReturnFunction<(String?, String?)> where M1.OptionalMatchedType == String, M2.OptionalMatchedType == String {
	        let matchers: [Cuckoo.ParameterMatcher<(String?, String?)>] = [wrap(matchable: height) { $0.0 }, wrap(matchable: weight) { $0.1 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockHomeInteractor.self, method: "verifyBMI(height: String?, weight: String?)", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_HomeInteractor: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    
	    var presenter: Cuckoo.VerifyOptionalProperty<HomePresentationLogic> {
	        return .init(manager: cuckoo_manager, name: "presenter", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	    @discardableResult
	    func verifyBMI<M1: Cuckoo.OptionalMatchable, M2: Cuckoo.OptionalMatchable>(height: M1, weight: M2) -> Cuckoo.__DoNotUse<(String?, String?), Void> where M1.OptionalMatchedType == String, M2.OptionalMatchedType == String {
	        let matchers: [Cuckoo.ParameterMatcher<(String?, String?)>] = [wrap(matchable: height) { $0.0 }, wrap(matchable: weight) { $0.1 }]
	        return cuckoo_manager.verify("verifyBMI(height: String?, weight: String?)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class HomeInteractorStub: HomeInteractor {
    
    
     override var presenter: HomePresentationLogic? {
        get {
            return DefaultValueRegistry.defaultValue(for: (HomePresentationLogic?).self)
        }
        
        set { }
        
    }
    

    

    
     override func verifyBMI(height: String?, weight: String?)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
}


// MARK: - Mocks generated from file: TestExample/Scenes/Home/HomePresenter.swift at 2019-10-19 21:51:28 +0000

//
//  HomePresenter.swift
//  TestExample
//
//  Created by Hélio Mesquita on 11/10/19.
//  Copyright (c) 2019 Hélio Mesquita. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
// This tag below is used to create the testable files from the Cuckoo pod
// CUCKOO_TESTABLE
import Cuckoo
@testable import TestExample

import UIKit


 class MockHomePresentationLogic: HomePresentationLogic, Cuckoo.ProtocolMock {
    
     typealias MocksType = HomePresentationLogic
    
     typealias Stubbing = __StubbingProxy_HomePresentationLogic
     typealias Verification = __VerificationProxy_HomePresentationLogic

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: false)

    
    private var __defaultImplStub: HomePresentationLogic?

     func enableDefaultImplementation(_ stub: HomePresentationLogic) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    

    

    
    
    
     func showInvalidData()  {
        
    return cuckoo_manager.call("showInvalidData()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.showInvalidData())
        
    }
    
    
    
     func weightBelowNormal()  {
        
    return cuckoo_manager.call("weightBelowNormal()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.weightBelowNormal())
        
    }
    
    
    
     func normalWeight()  {
        
    return cuckoo_manager.call("normalWeight()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.normalWeight())
        
    }
    
    
    
     func overweight()  {
        
    return cuckoo_manager.call("overweight()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.overweight())
        
    }
    
    
    
     func obesity()  {
        
    return cuckoo_manager.call("obesity()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.obesity())
        
    }
    

	 struct __StubbingProxy_HomePresentationLogic: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    func showInvalidData() -> Cuckoo.ProtocolStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockHomePresentationLogic.self, method: "showInvalidData()", parameterMatchers: matchers))
	    }
	    
	    func weightBelowNormal() -> Cuckoo.ProtocolStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockHomePresentationLogic.self, method: "weightBelowNormal()", parameterMatchers: matchers))
	    }
	    
	    func normalWeight() -> Cuckoo.ProtocolStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockHomePresentationLogic.self, method: "normalWeight()", parameterMatchers: matchers))
	    }
	    
	    func overweight() -> Cuckoo.ProtocolStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockHomePresentationLogic.self, method: "overweight()", parameterMatchers: matchers))
	    }
	    
	    func obesity() -> Cuckoo.ProtocolStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockHomePresentationLogic.self, method: "obesity()", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_HomePresentationLogic: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	
	    
	    @discardableResult
	    func showInvalidData() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("showInvalidData()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func weightBelowNormal() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("weightBelowNormal()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func normalWeight() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("normalWeight()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func overweight() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("overweight()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func obesity() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("obesity()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class HomePresentationLogicStub: HomePresentationLogic {
    

    

    
     func showInvalidData()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     func weightBelowNormal()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     func normalWeight()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     func overweight()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     func obesity()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
}



 class MockHomePresenter: HomePresenter, Cuckoo.ClassMock {
    
     typealias MocksType = HomePresenter
    
     typealias Stubbing = __StubbingProxy_HomePresenter
     typealias Verification = __VerificationProxy_HomePresenter

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: true)

    
    private var __defaultImplStub: HomePresenter?

     func enableDefaultImplementation(_ stub: HomePresenter) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    
    
    
     override var viewController: HomeDisplayLogic? {
        get {
            return cuckoo_manager.getter("viewController",
                superclassCall:
                    
                    super.viewController
                    ,
                defaultCall: __defaultImplStub!.viewController)
        }
        
        set {
            cuckoo_manager.setter("viewController",
                value: newValue,
                superclassCall:
                    
                    super.viewController = newValue
                    ,
                defaultCall: __defaultImplStub!.viewController = newValue)
        }
        
    }
    

    

    
    
    
     override func showInvalidData()  {
        
    return cuckoo_manager.call("showInvalidData()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                super.showInvalidData()
                ,
            defaultCall: __defaultImplStub!.showInvalidData())
        
    }
    
    
    
     override func weightBelowNormal()  {
        
    return cuckoo_manager.call("weightBelowNormal()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                super.weightBelowNormal()
                ,
            defaultCall: __defaultImplStub!.weightBelowNormal())
        
    }
    
    
    
     override func normalWeight()  {
        
    return cuckoo_manager.call("normalWeight()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                super.normalWeight()
                ,
            defaultCall: __defaultImplStub!.normalWeight())
        
    }
    
    
    
     override func overweight()  {
        
    return cuckoo_manager.call("overweight()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                super.overweight()
                ,
            defaultCall: __defaultImplStub!.overweight())
        
    }
    
    
    
     override func obesity()  {
        
    return cuckoo_manager.call("obesity()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                super.obesity()
                ,
            defaultCall: __defaultImplStub!.obesity())
        
    }
    

	 struct __StubbingProxy_HomePresenter: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    var viewController: Cuckoo.ClassToBeStubbedOptionalProperty<MockHomePresenter, HomeDisplayLogic> {
	        return .init(manager: cuckoo_manager, name: "viewController")
	    }
	    
	    
	    func showInvalidData() -> Cuckoo.ClassStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockHomePresenter.self, method: "showInvalidData()", parameterMatchers: matchers))
	    }
	    
	    func weightBelowNormal() -> Cuckoo.ClassStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockHomePresenter.self, method: "weightBelowNormal()", parameterMatchers: matchers))
	    }
	    
	    func normalWeight() -> Cuckoo.ClassStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockHomePresenter.self, method: "normalWeight()", parameterMatchers: matchers))
	    }
	    
	    func overweight() -> Cuckoo.ClassStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockHomePresenter.self, method: "overweight()", parameterMatchers: matchers))
	    }
	    
	    func obesity() -> Cuckoo.ClassStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockHomePresenter.self, method: "obesity()", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_HomePresenter: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    
	    var viewController: Cuckoo.VerifyOptionalProperty<HomeDisplayLogic> {
	        return .init(manager: cuckoo_manager, name: "viewController", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	    @discardableResult
	    func showInvalidData() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("showInvalidData()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func weightBelowNormal() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("weightBelowNormal()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func normalWeight() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("normalWeight()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func overweight() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("overweight()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func obesity() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("obesity()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class HomePresenterStub: HomePresenter {
    
    
     override var viewController: HomeDisplayLogic? {
        get {
            return DefaultValueRegistry.defaultValue(for: (HomeDisplayLogic?).self)
        }
        
        set { }
        
    }
    

    

    
     override func showInvalidData()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     override func weightBelowNormal()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     override func normalWeight()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     override func overweight()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     override func obesity()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
}


// MARK: - Mocks generated from file: TestExample/Scenes/Home/HomeWorker.swift at 2019-10-19 21:51:28 +0000

//
//  HomeWorker.swift
//  TestExample
//
//  Created by Hélio Mesquita on 11/10/19.
//  Copyright (c) 2019 Hélio Mesquita. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
// This tag below is used to create the testable files from the Cuckoo pod
// CUCKOO_TESTABLE
import Cuckoo
@testable import TestExample

import Foundation
import PromiseKit


 class MockHomeWorker: HomeWorker, Cuckoo.ClassMock {
    
     typealias MocksType = HomeWorker
    
     typealias Stubbing = __StubbingProxy_HomeWorker
     typealias Verification = __VerificationProxy_HomeWorker

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: true)

    
    private var __defaultImplStub: HomeWorker?

     func enableDefaultImplementation(_ stub: HomeWorker) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    

    

    

	 struct __StubbingProxy_HomeWorker: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	}

	 struct __VerificationProxy_HomeWorker: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	
	    
	}
}

 class HomeWorkerStub: HomeWorker {
    

    

    
}

